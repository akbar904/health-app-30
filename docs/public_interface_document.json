{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application follows the Stacked architecture and provides a todo list management system. It includes features for creating, completing, and deleting todo items, as well as custom dialogs and bottom sheets for displaying notifications and alerts. The application also has a startup view that performs initialization logic before navigating to the main home view.",
  "architecture_overview": "The application is structured using the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It utilizes Stacked for state management, routing, and dependency injection. The app.dart file defines the app structure, including routes, services, bottom sheets, and dialogs. The application follows a clean separation of concerns, with ViewModels handling the business logic and Views responsible for the UI.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet_model.dart",
      "description": "This file contains the `AddTodoSheetModel` class, which is responsible for managing the state and functionality of the 'Add Todo' bottom sheet in the application. It provides the core logic for creating new todo items.",
      "class_diagram": "@startuml\n\nclass AddTodoSheetModel {\n  - _todoTitle: String\n  + canAdd: bool\n  + setTodoTitle(String value): void\n  + addTodo(): void\n}\n\nAddTodoSheetModel -down-> TodoService\n\n@enduml",
      "methods": [
        {
          "name": "setTodoTitle",
          "description": "Sets the title of the new todo item and notifies listeners of the change.",
          "parameters": [
            "String value"
          ],
          "return_type": "void"
        },
        {
          "name": "addTodo",
          "description": "Adds the new todo item to the TodoService if the title is not empty, then notifies listeners of the change.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "my_app/app/app.locator.dart",
        "my_app/services/todo_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a set of utility functions and constants that help with the layout and styling of UI elements in a Flutter application. It aims to create a consistent and responsive user interface by providing reusable UI helpers.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  +const horizontalSpaceTiny: Widget\n  +const horizontalSpaceSmall: Widget\n  +const horizontalSpaceMedium: Widget\n  +const horizontalSpaceLarge: Widget\n  +const verticalSpaceTiny: Widget\n  +const verticalSpaceSmall: Widget\n  +const verticalSpaceMedium: Widget\n  +const verticalSpaceLarge: Widget\n  +const verticalSpaceMassive: Widget\n  +const spacedDivider: Widget\n  +verticalSpace(double height): Widget\n  +screenWidth(BuildContext context): double\n  +screenHeight(BuildContext context): double\n  +screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +halfScreenWidth(BuildContext context): double\n  +thirdScreenWidth(BuildContext context): double\n  +quarterScreenWidth(BuildContext context): double\n  +getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  +getResponsiveSmallFontSize(BuildContext context): double\n  +getResponsiveMediumFontSize(BuildContext context): double\n  +getResponsiveLargeFontSize(BuildContext context): double\n  +getResponsiveExtraLargeFontSize(BuildContext context): double\n  +getResponsiveMassiveFontSize(BuildContext context): double\n  +getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a SizedBox with the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width and the provided font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It serves as a centralized location for managing the application's color palette, ensuring consistent and unified theming across different UI components.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It acts as the view model for the notice bottom sheet, handling the logic and data required to display the notice information to the user.",
      "class_diagram": "",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class, which initializes the base view model functionality.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/confirm_delete/confirm_delete_dialog.dart",
      "description": "The ConfirmDeleteDialog is responsible for displaying a confirmation dialog to the user when they attempt to delete an item. This dialog provides a clear and user-friendly way for the application to ensure the user intends to perform a potentially destructive action, preventing accidental deletions.",
      "class_diagram": "@startuml\n  class ConfirmDeleteDialog {\n    + DialogRequest request\n    + Function(DialogResponse) completer\n    + build(context): Widget\n  }\n  @enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the confirmation dialog, including the title, description, and action buttons to confirm or cancel the delete operation.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class in this file represents a single to-do item with its key attributes, such as ID, title, completion status, and creation date. It provides a simple and reusable data model for managing to-do items in a todo list application.",
      "class_diagram": "@startuml\nclass TodoModel {\n  +String id\n  +String title\n  +bool isCompleted\n  +DateTime createdAt\n  +TodoModel copyWith()\n}\n@enduml",
      "methods": [
        {
          "name": "TodoModel",
          "description": "Constructor for creating a new TodoModel instance with required ID, title, and creation date, and an optional isCompleted flag.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with the specified changes to the original model's properties.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "props",
          "description": "Returns a list of the model's properties, used for equality comparison and hashing.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines the `NoticeSheet` class, which is responsible for displaying a bottom sheet with a notice or alert message in the application. The bottom sheet contains a title, description, and some spacing, and is designed to be used as a reusable UI component.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +NoticeSheet({required completer, required request})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet o-- NoticeSheetModel\nNoticeSheet --o SheetRequest\nNoticeSheet --o SheetResponse\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class, which takes in a `completer` function and a `request` object as required parameters. The `completer` function is used to complete the bottom sheet interaction, while the `request` object contains the title and description to be displayed in the bottom sheet.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the bottom sheet. It takes in the `BuildContext`, the `NoticeSheetModel`, and an optional `Widget` child, and returns a `Widget` that represents the bottom sheet content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel`, which is used by the `builder` method to provide the necessary data and functionality for the bottom sheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the implementation of the `InfoAlertDialog` class, which is responsible for displaying an information alert dialog in the Flutter application. The dialog is used to present important information to the user, such as an update or a notification.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  + InfoAlertDialog({required this.request, required this.completer, Key? key})\n  + Widget builder(BuildContext, InfoAlertDialogModel, Widget?)\n  + InfoAlertDialogModel viewModelBuilder(BuildContext)\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialog",
          "description": "The constructor for the `InfoAlertDialog` class. It takes a `DialogRequest` and a `completer` function as required parameters.",
          "parameters": [
            "request",
            "completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `InfoAlertDialog`. It takes the `BuildContext`, the `InfoAlertDialogModel`, and an optional `Widget` as parameters, and returns a `Widget` representing the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel`, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/core/enums/dialog_priority.dart",
      "description": "This Dart file defines an enum called `DialogPriority` that represents the priority level of a dialog or notification in the application. It provides a standardized way to categorize and handle dialogs based on their importance.",
      "class_diagram": "@startuml\nclass DialogPriority {\n  +low\n  +medium\n  +high\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the state and behavior of the app-level view in a Flutter application. It serves as the view model for the app's main UI, providing a layer of abstraction between the UI and the underlying business logic.",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/widgets/todo_item.dart",
      "description": "The TodoItem widget is responsible for rendering a single todo item in a to-do list application. It provides the UI and interactivity for displaying, toggling the completion status, and deleting a todo item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  -TodoModel todo\n  -VoidCallback onToggle\n  -VoidCallback onDelete\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for a single todo item, including a checkbox to toggle completion status, the todo title, and a delete button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the state and operations of the todo list in the application. It provides the core functionality for creating, updating, and deleting todo items, and notifies the rest of the application of changes to the todo list.",
      "class_diagram": "@startuml\nclass TodoService {\n  -List<TodoModel> _todos\n  +List<TodoModel> get todos\n  +void addTodo(String title)\n  +void toggleTodo(String id)\n  +void deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list with the provided title.",
          "parameters": [
            "String title"
          ],
          "return_type": "void"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of the todo item with the given ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes the todo item with the given ID from the list.",
          "parameters": [
            "String id"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:my_app/models/todo_model.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/core/enums/bottom_sheet_type.dart",
      "description": "This Dart file defines an enumeration called `BottomSheetType` that represents the different types of bottom sheets used in the application. It serves as a centralized way to manage and communicate the various bottom sheet types throughout the codebase.",
      "class_diagram": "@startuml\n\nenum BottomSheetType {\n    notice\n    addTodo\n}\n\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, maps them to specific views, and provides navigation methods to navigate between those views.",
      "class_diagram": "@startuml\nclass Routes {\n  + static const homeView: String\n  + static const startupView: String\n  + static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  + List<RouteDef> get routes()\n  + Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  + Future<dynamic> navigateToHomeView()\n  + Future<dynamic> navigateToStartupView()\n  + Future<dynamic> replaceWithHomeView()\n  + Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for configuring and registering the dependency injection (DI) container used throughout the application. It sets up the necessary dependencies, including navigation, dialog, and bottom sheet services, using the Stacked architecture pattern.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for setting up the DI container by registering the necessary services and dependencies. It can optionally take an environment parameter to filter the registered dependencies based on the environment.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "package:stacked_services/src/dialog/dialog_service.dart",
        "package:stacked_services/src/navigation/navigation_service.dart",
        "package:stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the registration and configuration of custom dialogs used throughout the Flutter application. It defines the main dialog types and sets up the necessary infrastructure to seamlessly integrate these dialogs into the app's user interface.",
      "class_diagram": "@startuml\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nDependency --> DialogType\nDependency --> DialogBuilder\nDependency --> DialogService\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the custom dialog builders and registers them with the DialogService. It maps each DialogType to its corresponding DialogBuilder function, which is responsible for rendering the specific dialog UI.",
          "parameters": [
            ""
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for providing a bottom sheet interface for adding new todo items in the application. It handles user input, validates the todo title, and interacts with the application's state management to create a new todo item.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -Function(SheetResponse) completer\n  -SheetRequest request\n  +builder(BuildContext, AddTodoSheetModel, Widget)\n  +viewModelBuilder(BuildContext): AddTodoSheetModel\n}\n\nclass AddTodoSheetModel {\n  +setTodoTitle(String)\n  +canAdd(): bool\n  +addTodo()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `AddTodoSheet`, including the input field, cancel and add buttons.",
          "parameters": [
            "BuildContext",
            "AddTodoSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of `AddTodoSheetModel` to the `StackedView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "AddTodoSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "add_todo_sheet_model.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI in the Flutter application. It defines the available bottom sheet types and registers custom builders for each type, allowing the application to display various types of bottom sheets dynamically.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  + setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\nclass NoticeSheet {\n  + NoticeSheet(SheetRequest, SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the BottomSheetService with custom builders for each bottom sheet type, allowing the application to display different types of bottom sheets.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in the application's user interface.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\nparticipant AddTodoSheet\nparticipant AddTodoSheetModel\nparticipant BottomSheetService\nparticipant DialogService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Initialize todo items\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (add, toggle, delete todo)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: Perform CRUD operations\nHomeViewModel -> BottomSheetService: Show 'Add Todo' bottom sheet\nHomeViewModel -> DialogService: Show 'Confirm Delete' dialog\n@enduml",
  "state_management_flow": "The application uses the Stacked state management approach, with ViewModels (e.g., HomeViewModel, StartupViewModel, AddTodoSheetModel) responsible for managing the state and business logic for their respective views. The TodoService class acts as a central repository for managing the todo list data, and it notifies the rest of the application when changes occur. The ViewModels interact with the TodoService to update the todo list state, and they expose that state to their corresponding Views.",
  "navigation_flow": "The application's navigation is handled by the Stacked Router, which is defined in the app.router.dart file. The main navigation flow starts with the main.dart file, which sets up the app and runs the AppView. The AppView initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. The HomeView then manages the user interactions, such as adding, toggling, and deleting todo items, by communicating with the HomeViewModel. The HomeViewModel also handles the navigation to the 'Add Todo' bottom sheet and the 'Confirm Delete' dialog."
}